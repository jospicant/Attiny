
C:\Users\User\AppData\Local\Temp\arduino_build_776015/Sleep_INT0_Pin7.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
   0:	1d c0       	rjmp	.+58     	; 0x3c <__ctors_end>
   2:	18 c1       	rjmp	.+560    	; 0x234 <__vector_1>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	ca c0       	rjmp	.+404    	; 0x1a0 <__vector_5>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>

0000001e <__trampolines_end>:
__trampolines_start():
  1e:	00 00       	nop
  20:	00 00       	nop
  22:	37 00       	.word	0x0037	; ????

00000024 <port_to_output_PGM>:
  24:	00 00 00 00 38 00                                   ....8.

0000002a <digital_pin_to_port_PGM>:
  2a:	02 02 02 02 02 02                                   ......

00000030 <digital_pin_to_bit_mask_PGM>:
  30:	01 02 04 08 10 20                                   ..... 

00000036 <digital_pin_to_timer_PGM>:
  36:	01 02 00 00 04 00                                   ......

0000003c <__ctors_end>:
__dtors_end():
  3c:	11 24       	eor	r1, r1
  3e:	1f be       	out	0x3f, r1	; 63
  40:	cf e5       	ldi	r28, 0x5F	; 95
  42:	d2 e0       	ldi	r29, 0x02	; 2
  44:	de bf       	out	0x3e, r29	; 62
  46:	cd bf       	out	0x3d, r28	; 61

00000048 <__do_clear_bss>:
__do_clear_bss():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
  48:	20 e0       	ldi	r18, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
  4a:	a0 e6       	ldi	r26, 0x60	; 96
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
  4c:	b0 e0       	ldi	r27, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
  52:	ac 36       	cpi	r26, 0x6C	; 108
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
  54:	b2 07       	cpc	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
.do_clear_bss_start():
  58:	fd d0       	rcall	.+506    	; 0x254 <main>
  5a:	74 c1       	rjmp	.+744    	; 0x344 <_exit>

0000005c <__bad_interrupt>:
__vector_12():
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <digitalWrite.constprop.0>:
digitalWrite.constprop.0():
C:\Users\User\AppData\Local\arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring_digital.c:139
}

void digitalWrite(uint8_t pin, uint8_t val)
{
  if (pin&128) {pin=analogInputToDigitalPin((pin&127));}
  uint8_t timer = digitalPinToTimer(pin);
  5e:	e6 e3       	ldi	r30, 0x36	; 54
  60:	f0 e0       	ldi	r31, 0x00	; 0
  62:	24 91       	lpm	r18, Z
C:\Users\User\AppData\Local\arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring_digital.c:140
  uint8_t bit = digitalPinToBitMask(pin);
  64:	e0 e3       	ldi	r30, 0x30	; 48
  66:	f0 e0       	ldi	r31, 0x00	; 0
  68:	94 91       	lpm	r25, Z
C:\Users\User\AppData\Local\arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring_digital.c:141
  uint8_t port = digitalPinToPort(pin);
  6a:	ea e2       	ldi	r30, 0x2A	; 42
  6c:	f0 e0       	ldi	r31, 0x00	; 0
  6e:	e4 91       	lpm	r30, Z
C:\Users\User\AppData\Local\arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring_digital.c:144
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
  70:	ee 23       	and	r30, r30
  72:	c1 f0       	breq	.+48     	; 0xa4 <digitalWrite.constprop.0+0x46>
C:\Users\User\AppData\Local\arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring_digital.c:148

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
  74:	22 23       	and	r18, r18
  76:	29 f0       	breq	.+10     	; 0x82 <digitalWrite.constprop.0+0x24>
turnOffPWM():
C:\Users\User\AppData\Local\arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring_digital.c:67
}

static void turnOffPWM(uint8_t timer)
{
  #if defined(TCCR0A) && defined(COM0A1)
  if( timer == TIMER0A){
  78:	21 30       	cpi	r18, 0x01	; 1
  7a:	a9 f4       	brne	.+42     	; 0xa6 <digitalWrite.constprop.0+0x48>
C:\Users\User\AppData\Local\arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring_digital.c:68
    cbi(TCCR0A, COM0A1);
  7c:	2a b5       	in	r18, 0x2a	; 42
  7e:	2f 77       	andi	r18, 0x7F	; 127
C:\Users\User\AppData\Local\arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring_digital.c:75
  } else
  #endif

  #if defined(TCCR0A) && defined(COM0B1)
  if( timer == TIMER0B){
    cbi(TCCR0A, COM0B1);
  80:	2a bd       	out	0x2a, r18	; 42
digitalWrite.constprop.0():
C:\Users\User\AppData\Local\arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring_digital.c:150

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);

  out = portOutputRegister(port);
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	ee 0f       	add	r30, r30
  86:	ff 1f       	adc	r31, r31
  88:	ec 5d       	subi	r30, 0xDC	; 220
  8a:	ff 4f       	sbci	r31, 0xFF	; 255
  8c:	a5 91       	lpm	r26, Z+
  8e:	b4 91       	lpm	r27, Z
C:\Users\User\AppData\Local\arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring_digital.c:152

  if (val == LOW) {
  90:	81 11       	cpse	r24, r1
  92:	1a c0       	rjmp	.+52     	; 0xc8 <digitalWrite.constprop.0+0x6a>
C:\Users\User\AppData\Local\arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring_digital.c:153
    uint8_t oldSREG = SREG;
  94:	8f b7       	in	r24, 0x3f	; 63
C:\Users\User\AppData\Local\arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring_digital.c:154
    cli();
  96:	f8 94       	cli
C:\Users\User\AppData\Local\arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring_digital.c:155
    *out &= ~bit;
  98:	2c 91       	ld	r18, X
  9a:	e9 2f       	mov	r30, r25
  9c:	e0 95       	com	r30
  9e:	e2 23       	and	r30, r18
C:\Users\User\AppData\Local\arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring_digital.c:160
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
    cli();
    *out |= bit;
  a0:	ec 93       	st	X, r30
C:\Users\User\AppData\Local\arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring_digital.c:161
    SREG = oldSREG;
  a2:	8f bf       	out	0x3f, r24	; 63
C:\Users\User\AppData\Local\arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring_digital.c:163
  }
}
  a4:	08 95       	ret
turnOffPWM():
C:\Users\User\AppData\Local\arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring_digital.c:74
    //cbi(TCCR0A, COM0A0);
  } else
  #endif

  #if defined(TCCR0A) && defined(COM0B1)
  if( timer == TIMER0B){
  a6:	22 30       	cpi	r18, 0x02	; 2
  a8:	19 f4       	brne	.+6      	; 0xb0 <digitalWrite.constprop.0+0x52>
C:\Users\User\AppData\Local\arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring_digital.c:75
    cbi(TCCR0A, COM0B1);
  aa:	2a b5       	in	r18, 0x2a	; 42
  ac:	2f 7d       	andi	r18, 0xDF	; 223
  ae:	e8 cf       	rjmp	.-48     	; 0x80 <digitalWrite.constprop.0+0x22>
C:\Users\User\AppData\Local\arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring_digital.c:105
    cbi(TCCR1C,COM1D0);
    //cbi(TCCR1A,PWM1D);
  } else
    #endif
  #if defined(TCCR1) && defined(COM1A1)
  if(timer == TIMER1A){
  b0:	23 30       	cpi	r18, 0x03	; 3
  b2:	21 f4       	brne	.+8      	; 0xbc <digitalWrite.constprop.0+0x5e>
C:\Users\User\AppData\Local\arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring_digital.c:106
    cbi(TCCR1, COM1A1);
  b4:	20 b7       	in	r18, 0x30	; 48
  b6:	2f 7d       	andi	r18, 0xDF	; 223
  b8:	20 bf       	out	0x30, r18	; 48
  ba:	e3 cf       	rjmp	.-58     	; 0x82 <digitalWrite.constprop.0+0x24>
C:\Users\User\AppData\Local\arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring_digital.c:125
  #endif
  } else
  #endif

  #if defined(TCCR1) && defined(COM1B1)
  if( timer == TIMER1B){
  bc:	24 30       	cpi	r18, 0x04	; 4
  be:	09 f7       	brne	.-62     	; 0x82 <digitalWrite.constprop.0+0x24>
C:\Users\User\AppData\Local\arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring_digital.c:126
    cbi(GTCCR, COM1B1);
  c0:	2c b5       	in	r18, 0x2c	; 44
  c2:	2f 7d       	andi	r18, 0xDF	; 223
  c4:	2c bd       	out	0x2c, r18	; 44
  c6:	dd cf       	rjmp	.-70     	; 0x82 <digitalWrite.constprop.0+0x24>
digitalWrite.constprop.0():
C:\Users\User\AppData\Local\arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring_digital.c:158
    uint8_t oldSREG = SREG;
    cli();
    *out &= ~bit;
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
  c8:	8f b7       	in	r24, 0x3f	; 63
C:\Users\User\AppData\Local\arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring_digital.c:159
    cli();
  ca:	f8 94       	cli
C:\Users\User\AppData\Local\arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring_digital.c:160
    *out |= bit;
  cc:	ec 91       	ld	r30, X
  ce:	e9 2b       	or	r30, r25
  d0:	e7 cf       	rjmp	.-50     	; 0xa0 <digitalWrite.constprop.0+0x42>

000000d2 <pinMode>:
pinMode():
C:\Users\User\AppData\Local\arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring_digital.c:33
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
  d2:	cf 93       	push	r28
  d4:	df 93       	push	r29
C:\Users\User\AppData\Local\arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring_digital.c:35
  if (pin&128) {pin=analogInputToDigitalPin((pin&127));}
  uint8_t bit = digitalPinToBitMask(pin);
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	fc 01       	movw	r30, r24
  da:	e0 5d       	subi	r30, 0xD0	; 208
  dc:	ff 4f       	sbci	r31, 0xFF	; 255
  de:	24 91       	lpm	r18, Z
C:\Users\User\AppData\Local\arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring_digital.c:36
  uint8_t port = digitalPinToPort(pin);
  e0:	86 5d       	subi	r24, 0xD6	; 214
  e2:	9f 4f       	sbci	r25, 0xFF	; 255
  e4:	fc 01       	movw	r30, r24
  e6:	84 91       	lpm	r24, Z
C:\Users\User\AppData\Local\arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring_digital.c:39
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
  e8:	88 23       	and	r24, r24
  ea:	d1 f0       	breq	.+52     	; 0x120 <pinMode+0x4e>
C:\Users\User\AppData\Local\arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring_digital.c:41

  reg = portModeRegister(port);
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	88 0f       	add	r24, r24
  f0:	99 1f       	adc	r25, r25
  f2:	fc 01       	movw	r30, r24
  f4:	e2 5e       	subi	r30, 0xE2	; 226
  f6:	ff 4f       	sbci	r31, 0xFF	; 255
  f8:	a5 91       	lpm	r26, Z+
  fa:	b4 91       	lpm	r27, Z
C:\Users\User\AppData\Local\arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring_digital.c:42
  out = portOutputRegister(port);
  fc:	fc 01       	movw	r30, r24
  fe:	ec 5d       	subi	r30, 0xDC	; 220
 100:	ff 4f       	sbci	r31, 0xFF	; 255
 102:	c5 91       	lpm	r28, Z+
 104:	d4 91       	lpm	r29, Z
C:\Users\User\AppData\Local\arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring_digital.c:50
    uint8_t oldSREG = SREG;
                cli();
    *reg &= ~bit;
    *out &= ~bit;
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
 106:	62 30       	cpi	r22, 0x02	; 2
 108:	71 f4       	brne	.+28     	; 0x126 <pinMode+0x54>
C:\Users\User\AppData\Local\arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring_digital.c:51
    uint8_t oldSREG = SREG;
 10a:	9f b7       	in	r25, 0x3f	; 63
C:\Users\User\AppData\Local\arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring_digital.c:52
                cli();
 10c:	f8 94       	cli
C:\Users\User\AppData\Local\arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring_digital.c:53
    *reg &= ~bit;
 10e:	3c 91       	ld	r19, X
 110:	82 2f       	mov	r24, r18
 112:	80 95       	com	r24
 114:	83 23       	and	r24, r19
 116:	8c 93       	st	X, r24
C:\Users\User\AppData\Local\arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring_digital.c:54
    *out |= bit;
 118:	e8 81       	ld	r30, Y
 11a:	2e 2b       	or	r18, r30
 11c:	28 83       	st	Y, r18
C:\Users\User\AppData\Local\arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring_digital.c:55
    SREG = oldSREG;
 11e:	9f bf       	out	0x3f, r25	; 63
C:\Users\User\AppData\Local\arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring_digital.c:62
    uint8_t oldSREG = SREG;
                cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
 120:	df 91       	pop	r29
 122:	cf 91       	pop	r28
 124:	08 95       	ret
C:\Users\User\AppData\Local\arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring_digital.c:57
                cli();
    *reg &= ~bit;
    *out |= bit;
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
 126:	8f b7       	in	r24, 0x3f	; 63
C:\Users\User\AppData\Local\arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring_digital.c:58
                cli();
 128:	f8 94       	cli
C:\Users\User\AppData\Local\arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring_digital.c:59
    *reg |= bit;
 12a:	ec 91       	ld	r30, X
 12c:	2e 2b       	or	r18, r30
 12e:	2c 93       	st	X, r18
C:\Users\User\AppData\Local\arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring_digital.c:60
    SREG = oldSREG;
 130:	8f bf       	out	0x3f, r24	; 63
 132:	f6 cf       	rjmp	.-20     	; 0x120 <pinMode+0x4e>

00000134 <DelMs(unsigned int)>:
_Z5DelMsj():
D:\jospicant\Arduino\Attiny\Sleep_INT0_Pin7/Sleep_INT0_Pin7.ino:95
//************************************************************************************************************

//Uso esta función para producir unos retrasos artificiales, sin interrupciones, solo por tiempo usado
//en los bucles for

void DelMs(unsigned int milisg){                         // Nota: las variables de los bucles for se definen como "volatile"
 134:	cf 93       	push	r28
 136:	df 93       	push	r29
 138:	00 d0       	rcall	.+0      	; 0x13a <DelMs(unsigned int)+0x6>
 13a:	00 d0       	rcall	.+0      	; 0x13c <DelMs(unsigned int)+0x8>
 13c:	cd b7       	in	r28, 0x3d	; 61
 13e:	de b7       	in	r29, 0x3e	; 62
D:\jospicant\Arduino\Attiny\Sleep_INT0_Pin7/Sleep_INT0_Pin7.ino:96
  for (volatile int i=0; i<milisg; i++){                 //Pq si se produjese una interrupción a mitad del for, al volver de la interrupción sigue por donde se quedó ( no pierde la cuenta del for )
 140:	1c 82       	std	Y+4, r1	; 0x04
 142:	1b 82       	std	Y+3, r1	; 0x03
 144:	2b 81       	ldd	r18, Y+3	; 0x03
 146:	3c 81       	ldd	r19, Y+4	; 0x04
 148:	28 17       	cp	r18, r24
 14a:	39 07       	cpc	r19, r25
 14c:	a8 f4       	brcc	.+42     	; 0x178 <DelMs(unsigned int)+0x44>
D:\jospicant\Arduino\Attiny\Sleep_INT0_Pin7/Sleep_INT0_Pin7.ino:97
    for(volatile int j=0; j<Calib_ms; j++){             //este bucle se calibra para que dure aprox 1 ms
 14e:	1a 82       	std	Y+2, r1	; 0x02
 150:	19 82       	std	Y+1, r1	; 0x01
 152:	29 81       	ldd	r18, Y+1	; 0x01
 154:	3a 81       	ldd	r19, Y+2	; 0x02
 156:	21 33       	cpi	r18, 0x31	; 49
 158:	31 05       	cpc	r19, r1
 15a:	3c f4       	brge	.+14     	; 0x16a <DelMs(unsigned int)+0x36>
 15c:	29 81       	ldd	r18, Y+1	; 0x01
 15e:	3a 81       	ldd	r19, Y+2	; 0x02
 160:	2f 5f       	subi	r18, 0xFF	; 255
 162:	3f 4f       	sbci	r19, 0xFF	; 255
 164:	3a 83       	std	Y+2, r19	; 0x02
 166:	29 83       	std	Y+1, r18	; 0x01
 168:	f4 cf       	rjmp	.-24     	; 0x152 <DelMs(unsigned int)+0x1e>
D:\jospicant\Arduino\Attiny\Sleep_INT0_Pin7/Sleep_INT0_Pin7.ino:96

//Uso esta función para producir unos retrasos artificiales, sin interrupciones, solo por tiempo usado
//en los bucles for

void DelMs(unsigned int milisg){                         // Nota: las variables de los bucles for se definen como "volatile"
  for (volatile int i=0; i<milisg; i++){                 //Pq si se produjese una interrupción a mitad del for, al volver de la interrupción sigue por donde se quedó ( no pierde la cuenta del for )
 16a:	2b 81       	ldd	r18, Y+3	; 0x03
 16c:	3c 81       	ldd	r19, Y+4	; 0x04
 16e:	2f 5f       	subi	r18, 0xFF	; 255
 170:	3f 4f       	sbci	r19, 0xFF	; 255
 172:	3c 83       	std	Y+4, r19	; 0x04
 174:	2b 83       	std	Y+3, r18	; 0x03
 176:	e6 cf       	rjmp	.-52     	; 0x144 <DelMs(unsigned int)+0x10>
D:\jospicant\Arduino\Attiny\Sleep_INT0_Pin7/Sleep_INT0_Pin7.ino:101
    for(volatile int j=0; j<Calib_ms; j++){             //este bucle se calibra para que dure aprox 1 ms
      //x bucles/msg   200msg  == 200 veces * x         // unos 49-50 bucles tardan 1 ms ( a 1MHz ) se puede ajsutar con la variable "Calib_ms"
    }
  }
}
 178:	0f 90       	pop	r0
 17a:	0f 90       	pop	r0
 17c:	0f 90       	pop	r0
 17e:	0f 90       	pop	r0
 180:	df 91       	pop	r29
 182:	cf 91       	pop	r28
 184:	08 95       	ret

00000186 <Parpadea_led(int)>:
_Z12Parpadea_ledi():
D:\jospicant\Arduino\Attiny\Sleep_INT0_Pin7/Sleep_INT0_Pin7.ino:115
  sleep_enable();       //solo habilitaré int aquí para poder despertar por INT0
  sleep_cpu();
}

//*************************************************************************************************************
void Parpadea_led(int tiempo){
 186:	cf 93       	push	r28
 188:	df 93       	push	r29
 18a:	ec 01       	movw	r28, r24
D:\jospicant\Arduino\Attiny\Sleep_INT0_Pin7/Sleep_INT0_Pin7.ino:116
  digitalWrite(led,HIGH); DelMs(tiempo); digitalWrite(led,LOW); DelMs(tiempo);
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	67 df       	rcall	.-306    	; 0x5e <digitalWrite.constprop.0>
 190:	ce 01       	movw	r24, r28
 192:	d0 df       	rcall	.-96     	; 0x134 <DelMs(unsigned int)>
 194:	80 e0       	ldi	r24, 0x00	; 0
 196:	63 df       	rcall	.-314    	; 0x5e <digitalWrite.constprop.0>
 198:	ce 01       	movw	r24, r28
D:\jospicant\Arduino\Attiny\Sleep_INT0_Pin7/Sleep_INT0_Pin7.ino:117
}
 19a:	df 91       	pop	r29
 19c:	cf 91       	pop	r28
D:\jospicant\Arduino\Attiny\Sleep_INT0_Pin7/Sleep_INT0_Pin7.ino:116
  sleep_cpu();
}

//*************************************************************************************************************
void Parpadea_led(int tiempo){
  digitalWrite(led,HIGH); DelMs(tiempo); digitalWrite(led,LOW); DelMs(tiempo);
 19e:	ca cf       	rjmp	.-108    	; 0x134 <DelMs(unsigned int)>

000001a0 <__vector_5>:
__vector_5():
C:\Users\User\AppData\Local\arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring.c:133
#else

#error Millis() timer not defined!

#endif
{
 1a0:	1f 92       	push	r1
 1a2:	0f 92       	push	r0
 1a4:	0f b6       	in	r0, 0x3f	; 63
 1a6:	0f 92       	push	r0
 1a8:	11 24       	eor	r1, r1
 1aa:	2f 93       	push	r18
 1ac:	3f 93       	push	r19
 1ae:	8f 93       	push	r24
 1b0:	9f 93       	push	r25
 1b2:	af 93       	push	r26
 1b4:	bf 93       	push	r27
C:\Users\User\AppData\Local\arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring.c:136
  // copy these to local variables so they can be stored in registers
  // (volatile variables must be read from memory on every access)
  unsigned long m = millis_timer_millis;
 1b6:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <millis_timer_millis>
 1ba:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <millis_timer_millis+0x1>
 1be:	a0 91 6a 00 	lds	r26, 0x006A	; 0x80006a <millis_timer_millis+0x2>
 1c2:	b0 91 6b 00 	lds	r27, 0x006B	; 0x80006b <millis_timer_millis+0x3>
C:\Users\User\AppData\Local\arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring.c:137
  unsigned char f = millis_timer_fract;
 1c6:	30 91 67 00 	lds	r19, 0x0067	; 0x800067 <millis_timer_fract>
C:\Users\User\AppData\Local\arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring.c:149
    f -= FRACT_MAX;
    m += 1;
  }
...rmv */

  f += FRACT_INC;
 1ca:	26 e0       	ldi	r18, 0x06	; 6
 1cc:	23 0f       	add	r18, r19
C:\Users\User\AppData\Local\arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring.c:151

  if (f >= FRACT_MAX)
 1ce:	2d 37       	cpi	r18, 0x7D	; 125
 1d0:	68 f1       	brcs	.+90     	; 0x22c <__vector_5+0x8c>
C:\Users\User\AppData\Local\arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring.c:153
  {
    f -= FRACT_MAX;
 1d2:	29 e8       	ldi	r18, 0x89	; 137
 1d4:	23 0f       	add	r18, r19
C:\Users\User\AppData\Local\arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring.c:155
  m += 1;
    m += MILLIS_INC;
 1d6:	03 96       	adiw	r24, 0x03	; 3
 1d8:	a1 1d       	adc	r26, r1
 1da:	b1 1d       	adc	r27, r1
C:\Users\User\AppData\Local\arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring.c:162
  else
  {
    m += MILLIS_INC;
  }

  millis_timer_fract = f;
 1dc:	20 93 67 00 	sts	0x0067, r18	; 0x800067 <millis_timer_fract>
C:\Users\User\AppData\Local\arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring.c:163
  millis_timer_millis = m;
 1e0:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <millis_timer_millis>
 1e4:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <millis_timer_millis+0x1>
 1e8:	a0 93 6a 00 	sts	0x006A, r26	; 0x80006a <millis_timer_millis+0x2>
 1ec:	b0 93 6b 00 	sts	0x006B, r27	; 0x80006b <millis_timer_millis+0x3>
C:\Users\User\AppData\Local\arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring.c:164
  millis_timer_overflow_count++;
 1f0:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <millis_timer_overflow_count>
 1f4:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <millis_timer_overflow_count+0x1>
 1f8:	a0 91 65 00 	lds	r26, 0x0065	; 0x800065 <millis_timer_overflow_count+0x2>
 1fc:	b0 91 66 00 	lds	r27, 0x0066	; 0x800066 <millis_timer_overflow_count+0x3>
 200:	01 96       	adiw	r24, 0x01	; 1
 202:	a1 1d       	adc	r26, r1
 204:	b1 1d       	adc	r27, r1
 206:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <millis_timer_overflow_count>
 20a:	90 93 64 00 	sts	0x0064, r25	; 0x800064 <millis_timer_overflow_count+0x1>
 20e:	a0 93 65 00 	sts	0x0065, r26	; 0x800065 <millis_timer_overflow_count+0x2>
 212:	b0 93 66 00 	sts	0x0066, r27	; 0x800066 <millis_timer_overflow_count+0x3>
C:\Users\User\AppData\Local\arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring.c:171

//MICROSECONDS_PER_MILLIS_OVERFLOW=2048
//MILLIS_INC=2
//FRACT_INC=6
//FRACT_MAX=125
}
 216:	bf 91       	pop	r27
 218:	af 91       	pop	r26
 21a:	9f 91       	pop	r25
 21c:	8f 91       	pop	r24
 21e:	3f 91       	pop	r19
 220:	2f 91       	pop	r18
 222:	0f 90       	pop	r0
 224:	0f be       	out	0x3f, r0	; 63
 226:	0f 90       	pop	r0
 228:	1f 90       	pop	r1
 22a:	18 95       	reti
C:\Users\User\AppData\Local\arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring.c:159
  m += 1;
    m += MILLIS_INC;
  }
  else
  {
    m += MILLIS_INC;
 22c:	02 96       	adiw	r24, 0x02	; 2
 22e:	a1 1d       	adc	r26, r1
 230:	b1 1d       	adc	r27, r1
 232:	d4 cf       	rjmp	.-88     	; 0x1dc <__vector_5+0x3c>

00000234 <__vector_1>:
__vector_1():
D:\jospicant\Arduino\Attiny\Sleep_INT0_Pin7/Sleep_INT0_Pin7.ino:122
}


//**************************************************************************************************************
ISR(INT0_vect)
{
 234:	1f 92       	push	r1
 236:	0f 92       	push	r0
 238:	0f b6       	in	r0, 0x3f	; 63
 23a:	0f 92       	push	r0
 23c:	11 24       	eor	r1, r1
 23e:	8f 93       	push	r24
D:\jospicant\Arduino\Attiny\Sleep_INT0_Pin7/Sleep_INT0_Pin7.ino:123
  cli();                 //Aseguro int desactivadas para q no se produzca ninguna otra mientras estoy en esta int
 240:	f8 94       	cli
D:\jospicant\Arduino\Attiny\Sleep_INT0_Pin7/Sleep_INT0_Pin7.ino:124
  interrupcion_ok=true;  //actualizo Flag
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <interrupcion_ok>
D:\jospicant\Arduino\Attiny\Sleep_INT0_Pin7/Sleep_INT0_Pin7.ino:127
  //cuenta_int++;        // aquí no funciona bien ( aunque sea volatile )
  //cuando sale de la interrupción, se activa automáticamente la interrupción  --> sei()  Ojo con esto.
}
 248:	8f 91       	pop	r24
 24a:	0f 90       	pop	r0
 24c:	0f be       	out	0x3f, r0	; 63
 24e:	0f 90       	pop	r0
 250:	1f 90       	pop	r1
 252:	18 95       	reti

00000254 <main>:
main():
C:\Users\User\AppData\Local\arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/main.cpp:6
#include <Arduino.h>

int main(void)
{
  #ifdef TUNED_OSCCAL_VALUE
  OSCCAL = TUNED_OSCCAL_VALUE; //set the oscillator calibration value based on the pins_arduino.h file. If this is not set, it will be optimised away
 254:	81 b7       	in	r24, 0x31	; 49
 256:	81 bf       	out	0x31, r24	; 49
init():
C:\Users\User\AppData\Local\arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring.c:699
    } else {
      OSCCAL += 5;
    }
  }
  #endif
  sei();
 258:	78 94       	sei
C:\Users\User\AppData\Local\arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring.c:831
  #endif
  #endif

  // Use the Millis Timer for fast PWM (unless it doesn't have an output).
  #if (TIMER_TO_USE_FOR_MILLIS == 0) && defined(WGM01)
  sbi(TCCR0A, WGM01);
 25a:	8a b5       	in	r24, 0x2a	; 42
 25c:	82 60       	ori	r24, 0x02	; 2
 25e:	8a bd       	out	0x2a, r24	; 42
C:\Users\User\AppData\Local\arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring.c:832
  sbi(TCCR0A, WGM00);
 260:	8a b5       	in	r24, 0x2a	; 42
 262:	81 60       	ori	r24, 0x01	; 1
 264:	8a bd       	out	0x2a, r24	; 42
C:\Users\User\AppData\Local\arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring.c:855
  #endif

  // Millis timer is always processor clock divided by MillisTimer_Prescale_Value (64)
  #if (TIMER_TO_USE_FOR_MILLIS == 0)
   #ifdef TCCR0B
    TCCR0B = (TCCR0B & ~((1<<CS02)|(1<<CS01)|(1<<CS00))) | (MillisTimer_Prescale_Index << CS00);
 266:	83 b7       	in	r24, 0x33	; 51
 268:	88 7f       	andi	r24, 0xF8	; 248
 26a:	82 60       	ori	r24, 0x02	; 2
 26c:	83 bf       	out	0x33, r24	; 51
C:\Users\User\AppData\Local\arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring.c:867
  TCCR1B = (TCCR1B & ~((1<<CS13)|(1<<CS12)|(1<<CS11)|(1<<CS10))) | (MillisTimer_Prescale_Index << CS10);
  #elif (TIMER_TO_USE_FOR_MILLIS == 1)
  TCCR1B = (TCCR1B & ~((1<<CS12)|(1<<CS11)|(1<<CS10))) | (MillisTimer_Prescale_Index << CS10);
  #endif
  // this needs to be called before setup() or some functions won't work there
  sei();
 26e:	78 94       	sei
C:\Users\User\AppData\Local\arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring.c:872

  #ifndef DISABLEMILLIS
  // Enable the overlow interrupt (this is the basic system tic-toc for millis)
  #if defined(TIMSK) && defined(TOIE0) && (TIMER_TO_USE_FOR_MILLIS == 0)
  sbi(TIMSK, TOIE0);
 270:	89 b7       	in	r24, 0x39	; 57
 272:	82 60       	ori	r24, 0x02	; 2
 274:	89 bf       	out	0x39, r24	; 57
initToneTimerInternal():
C:\Users\User\AppData\Local\arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring.c:507
  TCCR0B |= (ToneTimer_Prescale_Index << CS00);
  #elif defined(__AVR_ATtiny43__)
  TCCR1A = 3; //WGM 10=1, WGM11=1
  TCCR1B = 3; //prescaler of 64
  #elif (TIMER_TO_USE_FOR_TONE == 1) && defined(TCCR1)
  TCCR1 &= ~((1<<CS13) | (1<<CS12) | (1<<CS11) | (1<<CS10)); //stop the clock to configure
 276:	80 b7       	in	r24, 0x30	; 48
 278:	80 7f       	andi	r24, 0xF0	; 240
 27a:	80 bf       	out	0x30, r24	; 48
C:\Users\User\AppData\Local\arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring.c:509
  // Use the Tone Timer for fast PWM as phase correct not supported by this timer
  sbi(TCCR1, CTC1);
 27c:	80 b7       	in	r24, 0x30	; 48
 27e:	80 68       	ori	r24, 0x80	; 128
 280:	80 bf       	out	0x30, r24	; 48
C:\Users\User\AppData\Local\arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring.c:511
  //#if !defined(__AVR_ATtiny85__)
  sbi(TCCR1, PWM1A); //for the tiny 85, Timer0 is used instead.
 282:	80 b7       	in	r24, 0x30	; 48
 284:	80 64       	ori	r24, 0x40	; 64
 286:	80 bf       	out	0x30, r24	; 48
C:\Users\User\AppData\Local\arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring.c:513
  //#endif
  sbi(GTCCR, PWM1B);
 288:	8c b5       	in	r24, 0x2c	; 44
 28a:	80 64       	ori	r24, 0x40	; 64
 28c:	8c bd       	out	0x2c, r24	; 44
C:\Users\User\AppData\Local\arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring.c:514
  OCR1C = 0xFF; //Use 255 as the top to match with the others as this module doesn't have a 8bit PWM mode.
 28e:	8f ef       	ldi	r24, 0xFF	; 255
 290:	8d bd       	out	0x2d, r24	; 45
C:\Users\User\AppData\Local\arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring.c:515
  TCCR1 |= (ToneTimer_Prescale_Index << CS10);
 292:	80 b7       	in	r24, 0x30	; 48
 294:	84 60       	ori	r24, 0x04	; 4
 296:	80 bf       	out	0x30, r24	; 48
init():
C:\Users\User\AppData\Local\arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring.c:893

  // Initialize the ADC
  #if defined( INITIALIZE_ANALOG_TO_DIGITAL_CONVERTER ) && INITIALIZE_ANALOG_TO_DIGITAL_CONVERTER
  #if defined(ADCSRA)
    // set a2d prescale factor
  ADCSRA = (ADCSRA & ~((1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0))) | (ADC_ARDUINO_PRESCALER << ADPS0) | (1<<ADEN);
 298:	86 b1       	in	r24, 0x06	; 6
 29a:	88 77       	andi	r24, 0x78	; 120
 29c:	83 68       	ori	r24, 0x83	; 131
 29e:	86 b9       	out	0x06, r24	; 6
C:\Users\User\AppData\Local\arduino15\packages\ATTinyCore\hardware\avr\1.3.3\cores\tiny/wiring.c:895
    // enable a2d conversions
    sbi(ADCSRA, ADEN);
 2a0:	37 9a       	sbi	0x06, 7	; 6
setup():
D:\jospicant\Arduino\Attiny\Sleep_INT0_Pin7/Sleep_INT0_Pin7.ino:37

//************************************************************************************************************************************************************************
//************************************************************************************************************************************************************************
void setup() {

  cli();  // Si Deshabilito interrupciones, delay() ya no funcionará y si lo uso no se comportará correctamente pq usa las interrupciones de los timers --> uso una función DelMs(donde calibro aprox los ms )
 2a2:	f8 94       	cli
D:\jospicant\Arduino\Attiny\Sleep_INT0_Pin7/Sleep_INT0_Pin7.ino:38
  pinMode(led,OUTPUT);
 2a4:	61 e0       	ldi	r22, 0x01	; 1
 2a6:	80 e0       	ldi	r24, 0x00	; 0
 2a8:	14 df       	rcall	.-472    	; 0xd2 <pinMode>
D:\jospicant\Arduino\Attiny\Sleep_INT0_Pin7/Sleep_INT0_Pin7.ino:40
  //pinMode(PB1,INPUT_PULLUP);
  pinMode(PB2,INPUT_PULLUP);              //pulsador para despertar por INT0
 2aa:	62 e0       	ldi	r22, 0x02	; 2
 2ac:	82 e0       	ldi	r24, 0x02	; 2
 2ae:	11 df       	rcall	.-478    	; 0xd2 <pinMode>
D:\jospicant\Arduino\Attiny\Sleep_INT0_Pin7/Sleep_INT0_Pin7.ino:43
  //pinMode(PB3,INPUT_PULLUP);
  //pinMode(PB4,INPUT_PULLUP);
  pinMode(PB5,INPUT_PULLUP);             //Pulsador Reset
 2b0:	62 e0       	ldi	r22, 0x02	; 2
 2b2:	85 e0       	ldi	r24, 0x05	; 5
 2b4:	0e df       	rcall	.-484    	; 0xd2 <pinMode>
D:\jospicant\Arduino\Attiny\Sleep_INT0_Pin7/Sleep_INT0_Pin7.ino:46
  
  
  bitSet(GIMSK,INT0);                             // GIMSK (  INT0=1  PCIE = 0 ) Configuro INterrupción INT0 ( puerto PB2 = pin7 ) 
 2b6:	8b b7       	in	r24, 0x3b	; 59
 2b8:	80 64       	ori	r24, 0x40	; 64
 2ba:	8b bf       	out	0x3b, r24	; 59
D:\jospicant\Arduino\Attiny\Sleep_INT0_Pin7/Sleep_INT0_Pin7.ino:47
  bitClear(GIMSK,PCIE);
 2bc:	8b b7       	in	r24, 0x3b	; 59
 2be:	8f 7d       	andi	r24, 0xDF	; 223
 2c0:	8b bf       	out	0x3b, r24	; 59
D:\jospicant\Arduino\Attiny\Sleep_INT0_Pin7/Sleep_INT0_Pin7.ino:48
  bitClear(MCUCR,ISC00);                          // MCUCR ( ICSC00 = 0  ISC01 = 0  Activo por nivel bajo la interrupción INT0 )
 2c2:	85 b7       	in	r24, 0x35	; 53
 2c4:	8e 7f       	andi	r24, 0xFE	; 254
 2c6:	85 bf       	out	0x35, r24	; 53
D:\jospicant\Arduino\Attiny\Sleep_INT0_Pin7/Sleep_INT0_Pin7.ino:49
  bitClear(MCUCR,ISC01);
 2c8:	85 b7       	in	r24, 0x35	; 53
 2ca:	8d 7f       	andi	r24, 0xFD	; 253
 2cc:	85 bf       	out	0x35, r24	; 53
loop():
D:\jospicant\Arduino\Attiny\Sleep_INT0_Pin7/Sleep_INT0_Pin7.ino:62
   static unsigned int cuenta_int=0; 
   
  //********************* Aquí pondré todo lo q tiene q hacer antes de ir a dormir **************************
  //******** evitaré interrupciones pq quiero q haga todo lo que quiera sin q se active la rutina de int ****
  
  if( interrupcion_ok == false){                         //Primera vez q se alimenta o después de un Reset
 2ce:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <interrupcion_ok>
 2d2:	81 11       	cpse	r24, r1
 2d4:	1e c0       	rjmp	.+60     	; 0x312 <__stack+0xb3>
D:\jospicant\Arduino\Attiny\Sleep_INT0_Pin7/Sleep_INT0_Pin7.ino:63
    cuenta_int=0;
 2d6:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <_edata+0x1>
 2da:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
D:\jospicant\Arduino\Attiny\Sleep_INT0_Pin7/Sleep_INT0_Pin7.ino:64
    interrupcion_ok=false;
 2de:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <interrupcion_ok>
D:\jospicant\Arduino\Attiny\Sleep_INT0_Pin7/Sleep_INT0_Pin7.ino:65
    for(int i=0; i<3; i++){ Parpadea_led(250); }
 2e2:	8a ef       	ldi	r24, 0xFA	; 250
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	4f df       	rcall	.-354    	; 0x186 <Parpadea_led(int)>
 2e8:	8a ef       	ldi	r24, 0xFA	; 250
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	4c df       	rcall	.-360    	; 0x186 <Parpadea_led(int)>
 2ee:	8a ef       	ldi	r24, 0xFA	; 250
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	49 df       	rcall	.-366    	; 0x186 <Parpadea_led(int)>
A_Dormir():
D:\jospicant\Arduino\Attiny\Sleep_INT0_Pin7/Sleep_INT0_Pin7.ino:106
}

//*************************************************************************************************************
void A_Dormir(){

  bitSet(PRR,PRUSI);                              //Desactivo USI
 2f4:	80 b5       	in	r24, 0x20	; 32
 2f6:	82 60       	ori	r24, 0x02	; 2
 2f8:	80 bd       	out	0x20, r24	; 32
D:\jospicant\Arduino\Attiny\Sleep_INT0_Pin7/Sleep_INT0_Pin7.ino:107
  adc_disable();                                  //Antes de dormir desactivo ADC 
 2fa:	37 98       	cbi	0x06, 7	; 6
D:\jospicant\Arduino\Attiny\Sleep_INT0_Pin7/Sleep_INT0_Pin7.ino:108
  set_sleep_mode(SLEEP_MODE_PWR_DOWN);            //y configuro Modo en el que voy a dormir
 2fc:	85 b7       	in	r24, 0x35	; 53
 2fe:	87 7e       	andi	r24, 0xE7	; 231
 300:	80 61       	ori	r24, 0x10	; 16
 302:	85 bf       	out	0x35, r24	; 53
D:\jospicant\Arduino\Attiny\Sleep_INT0_Pin7/Sleep_INT0_Pin7.ino:109
  sei();                //Habilito int antes de ponerme a dormir pq si no, no podré despertarlo ( salvo reset o apagarlo )
 304:	78 94       	sei
D:\jospicant\Arduino\Attiny\Sleep_INT0_Pin7/Sleep_INT0_Pin7.ino:110
  sleep_enable();       //solo habilitaré int aquí para poder despertar por INT0
 306:	85 b7       	in	r24, 0x35	; 53
 308:	80 62       	ori	r24, 0x20	; 32
 30a:	85 bf       	out	0x35, r24	; 53
D:\jospicant\Arduino\Attiny\Sleep_INT0_Pin7/Sleep_INT0_Pin7.ino:111
  sleep_cpu();
 30c:	88 95       	sleep
loop():
D:\jospicant\Arduino\Attiny\Sleep_INT0_Pin7/Sleep_INT0_Pin7.ino:84
  }
   
    A_Dormir();                               // solo despierta por int  INT0, aquí habilitaré int para poder despertar por INT0
                                              // al volver de la interrupción, las interrupciones se activan solas --> sei() por lo q si quiero seguir controlando 
                                              // q no se produzcan interr, debo desactivarlas.
    cli();    //importante, si no las desactivo puedo producir una INT0 en cualquier parte del código y prefiero tenerlo controlado y que solo se produzca para despertar
 30e:	f8 94       	cli
 310:	de cf       	rjmp	.-68     	; 0x2ce <__stack+0x6f>
D:\jospicant\Arduino\Attiny\Sleep_INT0_Pin7/Sleep_INT0_Pin7.ino:69
    interrupcion_ok=false;
    for(int i=0; i<3; i++){ Parpadea_led(250); }
  }
  else{                                                 //Aquí solo entra si viene de una interrupción INT0 ( controlado por flag  interrupcion_ok = false o true )
                                                        //Aquí haré todo lo que quiera hacer tras haber despertado por INT0
    cuenta_int++;                                        //actualizo cuenta y flag de interrupción
 312:	c0 91 60 00 	lds	r28, 0x0060	; 0x800060 <_edata>
 316:	d0 91 61 00 	lds	r29, 0x0061	; 0x800061 <_edata+0x1>
 31a:	21 96       	adiw	r28, 0x01	; 1
 31c:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <_edata+0x1>
 320:	c0 93 60 00 	sts	0x0060, r28	; 0x800060 <_edata>
D:\jospicant\Arduino\Attiny\Sleep_INT0_Pin7/Sleep_INT0_Pin7.ino:70
    interrupcion_ok=false;
 324:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <interrupcion_ok>
D:\jospicant\Arduino\Attiny\Sleep_INT0_Pin7/Sleep_INT0_Pin7.ino:72
    
    Parpadea_led(1000);                                  //Hago todo lo q quiera tras ocurrir la interrución q me despertó 
 328:	88 ee       	ldi	r24, 0xE8	; 232
 32a:	93 e0       	ldi	r25, 0x03	; 3
 32c:	2c df       	rcall	.-424    	; 0x186 <Parpadea_led(int)>
main():
D:\jospicant\Arduino\Attiny\Sleep_INT0_Pin7/Sleep_INT0_Pin7.ino:73
    for (int i=0;i<cuenta_int; i++){
 32e:	10 e0       	ldi	r17, 0x00	; 0
 330:	00 e0       	ldi	r16, 0x00	; 0
loop():
 332:	0c 17       	cp	r16, r28
 334:	1d 07       	cpc	r17, r29
 336:	f0 f6       	brcc	.-68     	; 0x2f4 <__stack+0x95>
D:\jospicant\Arduino\Attiny\Sleep_INT0_Pin7/Sleep_INT0_Pin7.ino:74
      Parpadea_led(200);
 338:	88 ec       	ldi	r24, 0xC8	; 200
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	24 df       	rcall	.-440    	; 0x186 <Parpadea_led(int)>
D:\jospicant\Arduino\Attiny\Sleep_INT0_Pin7/Sleep_INT0_Pin7.ino:73
                                                        //Aquí haré todo lo que quiera hacer tras haber despertado por INT0
    cuenta_int++;                                        //actualizo cuenta y flag de interrupción
    interrupcion_ok=false;
    
    Parpadea_led(1000);                                  //Hago todo lo q quiera tras ocurrir la interrución q me despertó 
    for (int i=0;i<cuenta_int; i++){
 33e:	0f 5f       	subi	r16, 0xFF	; 255
 340:	1f 4f       	sbci	r17, 0xFF	; 255
 342:	f7 cf       	rjmp	.-18     	; 0x332 <__stack+0xd3>

00000344 <_exit>:
exit():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
 344:	f8 94       	cli

00000346 <__stop_program>:
__stop_program():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
 346:	ff cf       	rjmp	.-2      	; 0x346 <__stop_program>
